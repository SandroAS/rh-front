import {
  VBadge,
  VBtn,
  VChip,
  VSheet,
  makeCalendarProps,
  useCalendar
} from "./chunk-FOT4D2PT.js";
import {
  useDate
} from "./chunk-LYPUHKGB.js";
import "./chunk-RWW4XZP3.js";
import "./chunk-IW55HZHQ.js";
import {
  useLocale
} from "./chunk-E2RPFVMG.js";
import {
  chunkArray,
  convertToUnit,
  genericComponent,
  getPrefixedEventHandlers,
  pick,
  propsFactory,
  useRender
} from "./chunk-73FVYEAC.js";
import "./chunk-542D3654.js";
import {
  computed,
  createVNode,
  mergeProps,
  nextTick
} from "./chunk-J4DVLWB4.js";
import "./chunk-JVWSFFO4.js";

// node_modules/vuetify/lib/labs/VCalendar/VCalendar.js
import "/Users/sandro/Documents/softclinic/soft-clinic-front-v2/node_modules/vuetify/lib/labs/VCalendar/VCalendar.css";

// node_modules/vuetify/lib/labs/VCalendar/VCalendarDay.js
import "/Users/sandro/Documents/softclinic/soft-clinic-front-v2/node_modules/vuetify/lib/labs/VCalendar/VCalendarDay.css";

// node_modules/vuetify/lib/labs/VCalendar/VCalendarInterval.js
import "/Users/sandro/Documents/softclinic/soft-clinic-front-v2/node_modules/vuetify/lib/labs/VCalendar/VCalendarInterval.css";

// node_modules/vuetify/lib/labs/VCalendar/VCalendarIntervalEvent.js
import "/Users/sandro/Documents/softclinic/soft-clinic-front-v2/node_modules/vuetify/lib/labs/VCalendar/VCalendarIntervalEvent.css";
var makeVCalendarIntervalEventProps = propsFactory({
  allDay: Boolean,
  interval: Object,
  intervalDivisions: {
    type: Number,
    required: true
  },
  intervalDuration: {
    type: Number,
    required: true
  },
  intervalHeight: {
    type: Number,
    required: true
  },
  event: Object
}, "VCalendarIntervalEvent");
var VCalendarIntervalEvent = genericComponent()({
  name: "VCalendarIntervalEvent",
  inheritAttrs: false,
  props: makeVCalendarIntervalEventProps(),
  setup(props, _ref) {
    let {
      attrs,
      emit,
      slots
    } = _ref;
    const adapter = useDate();
    const calcHeight = () => {
      var _a, _b, _c, _d;
      if (!((_a = props.event) == null ? void 0 : _a.first) && !((_b = props.event) == null ? void 0 : _b.last) || adapter.isEqual((_c = props.event) == null ? void 0 : _c.end, (_d = props.interval) == null ? void 0 : _d.end)) {
        return {
          height: `${props.intervalHeight}px`,
          margin: convertToUnit(0)
        };
      } else {
        const {
          height,
          margin
        } = Array.from({
          length: props.intervalDivisions
        }, (_, x) => (x + 1) * (props.intervalDuration / props.intervalDivisions)).reduce((total, div, index) => {
          var _a2, _b2;
          if (adapter.isBefore(adapter.addMinutes((_a2 = props.interval) == null ? void 0 : _a2.start, div), (_b2 = props.event) == null ? void 0 : _b2.end)) {
            return {
              height: convertToUnit(props.intervalHeight / props.intervalDivisions * index),
              margin: convertToUnit(props.intervalHeight / props.intervalDivisions * index)
            };
          }
          return {
            height: total.height,
            margin: total.margin
          };
        }, {
          height: "",
          margin: ""
        });
        return {
          height,
          margin
        };
      }
    };
    useRender(() => {
      var _a, _b, _c, _d, _e, _f;
      return createVNode("div", null, [((_a = slots.intervalEvent) == null ? void 0 : _a.call(slots, {
        height: calcHeight().height,
        margin: calcHeight().margin,
        eventClass: "v-calendar-internal-event",
        event: props.event,
        interval: props.interval
      })) ?? createVNode(VSheet, mergeProps({
        "height": calcHeight().height,
        "density": "comfortable",
        "style": `margin-top: ${calcHeight().margin}`,
        "class": "v-calendar-internal-event",
        "color": ((_b = props.event) == null ? void 0 : _b.color) ?? void 0,
        "rounded": ((_c = props.event) == null ? void 0 : _c.first) && ((_d = props.event) == null ? void 0 : _d.last) ? true : ((_e = props.event) == null ? void 0 : _e.first) ? "t" : ((_f = props.event) == null ? void 0 : _f.last) ? "b" : false
      }, getPrefixedEventHandlers(attrs, ":event", () => ({
        event: props.event,
        allDay: false,
        day: null,
        interval: props.interval,
        intervalDivisions: props.intervalDivisions,
        intervalDuration: props.intervalDuration,
        intervalHeight: props.intervalHeight
      }))), {
        default: () => {
          var _a2, _b2;
          return [((_a2 = props.event) == null ? void 0 : _a2.first) ? (_b2 = props.event) == null ? void 0 : _b2.title : ""];
        }
      })]);
    });
    return {};
  }
});

// node_modules/vuetify/lib/labs/VCalendar/VCalendarInterval.js
var makeVCalendarIntervalProps = propsFactory({
  day: {
    type: Object,
    default: () => ({})
  },
  dayIndex: Number,
  events: Array,
  intervalDivisions: {
    type: Number,
    default: 2
  },
  intervalDuration: {
    type: Number,
    default: 60
  },
  intervalHeight: {
    type: Number,
    default: 48
  },
  intervalFormat: {
    type: [String, Function],
    default: "fullTime12h"
  },
  intervalStart: {
    type: Number,
    default: 0
  }
}, "VCalendarInterval");
var VCalendarInterval = genericComponent()({
  name: "VCalendarInterval",
  inheritAttrs: false,
  props: {
    index: {
      type: Number,
      required: true
    },
    ...makeVCalendarIntervalProps()
  },
  setup(props, _ref) {
    let {
      attrs,
      emit,
      slots
    } = _ref;
    const adapter = useDate();
    const interval = computed(() => {
      const start = adapter.addMinutes(adapter.startOfDay(props.day.date), props.intervalDuration * (props.index + props.intervalStart));
      const end = adapter.addMinutes(adapter.startOfDay(props.day.date), props.intervalDuration * (props.index + props.intervalStart + 1) - 1);
      return {
        ...props.day,
        label: adapter.format(start, "fullTime24h"),
        start,
        end,
        events: props.events ? props.events.filter((e) => !e.allDay && (adapter.isEqual(start, e.start) || adapter.isWithinRange(e.start, [start, end]) || adapter.isWithinRange(start, [e.start, e.end]) || adapter.isEqual(end, e.end))).map((e) => {
          return {
            ...e,
            first: adapter.isEqual(start, e.start) || adapter.isWithinRange(e.start, [start, end]),
            last: adapter.isEqual(end, e.end) || adapter.isWithinRange(e.end, [start, end])
          };
        }) : []
      };
    });
    useRender(() => {
      var _a, _b, _c, _d, _e;
      return props.dayIndex === 0 ? createVNode("div", {
        "class": "v-calendar-day__row-with-label",
        "style": `height: ${convertToUnit(props.intervalHeight)}`
      }, [createVNode("div", mergeProps({
        "class": "v-calendar-day__row-label"
      }, getPrefixedEventHandlers(attrs, ":time", () => props)), [((_a = slots.intervalTitle) == null ? void 0 : _a.call(slots, {
        interval: interval.value
      })) ?? (props.index ? props.intervalFormat ? typeof props.intervalFormat === "string" ? adapter.format(interval.value.start, "hours12h") : props.intervalFormat(interval.value) : interval.value.label : "12 AM")]), createVNode("div", {
        "class": "v-calendar-day__row-hairline"
      }, null), createVNode("div", mergeProps({
        "class": ["v-calendar-day__row-content", interval.value.events.some((e) => !e.last) ? "v-calendar-day__row-content-through" : ""]
      }, getPrefixedEventHandlers(attrs, ":interval", () => interval.value)), [((_b = slots.intervalBody) == null ? void 0 : _b.call(slots, {
        interval: interval.value
      })) ?? createVNode("div", null, [(_c = interval.value.events) == null ? void 0 : _c.map((event) => createVNode(VCalendarIntervalEvent, mergeProps({
        "event": event,
        "interval": interval.value,
        "intervalDivisions": props.intervalDivisions,
        "intervalDuration": props.intervalDuration,
        "intervalHeight": props.intervalHeight
      }, attrs), {
        ...slots.intervalEvent ? {
          intervalEvent: (_ref2) => {
            var _a2;
            let {
              height,
              margin,
              eventClass,
              event: event2,
              interval: interval2
            } = _ref2;
            return (_a2 = slots.intervalEvent) == null ? void 0 : _a2.call(slots, {
              height,
              margin,
              eventClass,
              event: event2,
              interval: interval2
            });
          }
        } : {}
      }))])])]) : createVNode("div", {
        "class": "v-calendar-day__row-without-label",
        "style": `height: ${convertToUnit(props.intervalHeight)}`
      }, [createVNode("div", mergeProps({
        "class": ["v-calendar-day__row-content", interval.value.events.some((e) => !e.last) ? "v-calendar-day__row-content-through" : ""]
      }, getPrefixedEventHandlers(attrs, ":interval", () => interval.value)), [((_d = slots.intervalBody) == null ? void 0 : _d.call(slots, {
        interval: interval.value
      })) ?? ((_e = interval.value.events) == null ? void 0 : _e.map((event) => createVNode(VCalendarIntervalEvent, mergeProps({
        "event": event,
        "interval": interval.value,
        "intervalDivisions": props.intervalDivisions,
        "intervalDuration": props.intervalDuration,
        "intervalHeight": props.intervalHeight
      }, attrs), {
        ...slots.intervalEvent ? {
          intervalEvent: (_ref3) => {
            var _a2;
            let {
              height,
              margin,
              eventClass,
              event: event2,
              interval: interval2
            } = _ref3;
            return (_a2 = slots.intervalEvent) == null ? void 0 : _a2.call(slots, {
              height,
              margin,
              eventClass,
              event: event2,
              interval: interval2
            });
          }
        } : {}
      })))])]);
    });
    return {
      interval
    };
  }
});

// node_modules/vuetify/lib/labs/VCalendar/VCalendarDay.js
var makeVCalendarDayProps = propsFactory({
  hideDayHeader: Boolean,
  intervals: {
    type: Number,
    default: 24
  },
  ...makeVCalendarIntervalProps()
}, "VCalendarDay");
var VCalendarDay = genericComponent()({
  name: "VCalendarDay",
  inheritAttrs: false,
  props: makeVCalendarDayProps(),
  setup(props, _ref) {
    let {
      attrs,
      slots
    } = _ref;
    const adapter = useDate();
    const intervals = computed(() => [...Array.from({
      length: props.intervals
    }, (v, i) => i).filter((_, index) => props.intervalDuration * (index + props.intervalStart) < 1440)]);
    useRender(() => {
      var _a, _b;
      const calendarIntervalProps = VCalendarInterval.filterProps(props);
      return createVNode("div", {
        "class": "v-calendar-day__container"
      }, [!props.hideDayHeader && createVNode("div", mergeProps({
        "key": "calendar-week-name",
        "class": "v-calendar-weekly__head-weekday"
      }, getPrefixedEventHandlers(attrs, ":day", () => props.day)), [adapter.format(props.day.date, "weekdayShort"), createVNode("div", null, [createVNode(VBtn, mergeProps(getPrefixedEventHandlers(attrs, ":date", () => props.day), {
        "class": ((_a = props.day) == null ? void 0 : _a.isToday) ? "v-calendar-day-label__today" : void 0,
        "icon": true,
        "text": adapter.format(props.day.date, "dayOfMonth"),
        "variant": ((_b = props.day) == null ? void 0 : _b.isToday) ? void 0 : "text"
      }), null)])]), intervals.value.map((_, index) => {
        var _a2;
        return ((_a2 = slots.interval) == null ? void 0 : _a2.call(slots, calendarIntervalProps)) ?? createVNode(VCalendarInterval, mergeProps({
          "index": index
        }, calendarIntervalProps, attrs, getPrefixedEventHandlers(attrs, ":interval", () => calendarIntervalProps)), {
          ...pick(slots, ["intervalBody", "intervalEvent", "intervalTitle"])
        });
      })]);
    });
    return {
      intervals
    };
  }
});

// node_modules/vuetify/lib/labs/VCalendar/VCalendarHeader.js
import "/Users/sandro/Documents/softclinic/soft-clinic-front-v2/node_modules/vuetify/lib/labs/VCalendar/VCalendarHeader.css";
var makeVCalendarHeaderProps = propsFactory({
  nextIcon: {
    type: String,
    default: "$next"
  },
  prevIcon: {
    type: String,
    default: "$prev"
  },
  title: String,
  text: {
    type: String,
    default: "$vuetify.calendar.today"
  },
  viewMode: {
    type: String,
    default: "month"
  }
}, "VCalendarHeader");
var VCalendarHeader = genericComponent()({
  name: "VCalendarHeader",
  props: makeVCalendarHeaderProps(),
  emits: {
    "click:next": () => true,
    "click:prev": () => true,
    "click:toToday": () => true
  },
  setup(props, _ref) {
    let {
      emit,
      slots
    } = _ref;
    const {
      t
    } = useLocale();
    function prev() {
      emit("click:prev");
    }
    function next() {
      emit("click:next");
    }
    function toToday() {
      emit("click:toToday");
    }
    useRender(() => {
      var _a;
      return createVNode("div", {
        "class": "v-calendar-header"
      }, [props.text && createVNode(VBtn, {
        "key": "today",
        "class": "v-calendar-header__today",
        "text": t(props.text),
        "variant": "outlined",
        "onClick": toToday
      }, null), createVNode(VBtn, {
        "density": "comfortable",
        "icon": props.prevIcon,
        "variant": "text",
        "onClick": prev
      }, null), createVNode(VBtn, {
        "density": "comfortable",
        "icon": props.nextIcon,
        "variant": "text",
        "onClick": next
      }, null), createVNode("div", {
        "class": "v-calendar-header__title"
      }, [((_a = slots.title) == null ? void 0 : _a.call(slots, {
        title: props.title
      })) ?? createVNode("span", null, [props.title])])]);
    });
    return {};
  }
});

// node_modules/vuetify/lib/labs/VCalendar/VCalendarMonthDay.js
import "/Users/sandro/Documents/softclinic/soft-clinic-front-v2/node_modules/vuetify/lib/labs/VCalendar/VCalendarMonthDay.css";

// node_modules/vuetify/lib/labs/VCalendar/VCalendarEvent.js
var makeVCalendarEventProps = propsFactory({
  allDay: Boolean,
  day: Object,
  event: Object
}, "VCalendarEvent");
var VCalendarEvent = genericComponent()({
  name: "VCalendarEvent",
  inheritAttrs: false,
  props: makeVCalendarEventProps(),
  setup(props, _ref) {
    let {
      attrs,
      emit,
      slots
    } = _ref;
    useRender(() => createVNode(VChip, mergeProps({
      "color": props.allDay ? "primary" : void 0,
      "density": "comfortable",
      "label": props.allDay,
      "width": "100%"
    }, getPrefixedEventHandlers(attrs, ":event", () => ({
      allDay: props.allDay,
      day: props.day,
      event: props.event
    }))), {
      default: () => {
        var _a, _b;
        return [createVNode(VBadge, {
          "inline": true,
          "dot": true,
          "color": (_a = props.event) == null ? void 0 : _a.color
        }, null), (_b = props.event) == null ? void 0 : _b.title];
      }
    }));
    return {};
  }
});

// node_modules/vuetify/lib/labs/VCalendar/VCalendarMonthDay.js
var makeVCalendarMonthDayProps = propsFactory({
  active: Boolean,
  color: String,
  day: {
    type: Object
  },
  disabled: Boolean,
  events: Array,
  title: [Number, String]
}, "VCalendarMonthDay");
var VCalendarMonthDay = genericComponent()({
  name: "VCalendarMonthDay",
  inheritAttrs: false,
  props: makeVCalendarMonthDayProps(),
  setup(props, _ref) {
    let {
      attrs,
      slots
    } = _ref;
    useRender(() => {
      var _a, _b, _c, _d, _e, _f, _g, _h;
      return createVNode("div", mergeProps({
        "class": ["v-calendar-month__day"]
      }, getPrefixedEventHandlers(attrs, ":day", () => props)), [!((_a = props.day) == null ? void 0 : _a.isHidden) ? createVNode("div", {
        "key": "title",
        "class": "v-calendar-weekly__day-label"
      }, [((_b = slots.dayTitle) == null ? void 0 : _b.call(slots, {
        title: props.title
      })) ?? createVNode(VBtn, mergeProps({
        "class": ((_c = props.day) == null ? void 0 : _c.isToday) ? "v-calendar-weekly__day-label__today" : void 0,
        "color": props.color,
        "disabled": props.disabled,
        "icon": true,
        "size": "x-small",
        "variant": ((_d = props.day) == null ? void 0 : _d.isToday) ? void 0 : "flat",
        "text": `${props.title}`
      }, getPrefixedEventHandlers(attrs, ":date", () => props)), null)]) : void 0, !((_e = props.day) == null ? void 0 : _e.isHidden) ? createVNode("div", {
        "key": "content",
        "class": "v-calendar-weekly__day-content"
      }, [((_f = slots.dayBody) == null ? void 0 : _f.call(slots, {
        day: props.day,
        events: props.events
      })) ?? createVNode("div", null, [createVNode("div", {
        "class": "v-calendar-weekly__day-alldayevents-container"
      }, [(_g = props.events) == null ? void 0 : _g.filter((event) => event.allDay).map((event) => slots.dayEvent ? slots.dayEvent({
        day: props.day,
        allDay: true,
        event
      }) : createVNode(VCalendarEvent, mergeProps({
        "day": props.day,
        "event": event,
        "allDay": true
      }, attrs), null))]), createVNode("div", {
        "class": "v-calendar-weekly__day-events-container"
      }, [(_h = props.events) == null ? void 0 : _h.filter((event) => !event.allDay).map((event) => slots.dayEvent ? slots.dayEvent({
        day: props.day,
        event,
        allDay: false
      }) : createVNode(VCalendarEvent, mergeProps({
        "day": props.day,
        "event": event
      }, attrs), null))])])]) : void 0]);
    });
    return {};
  }
});

// node_modules/vuetify/lib/labs/VCalendar/VCalendar.js
var makeVCalendarProps = propsFactory({
  hideHeader: Boolean,
  hideWeekNumber: Boolean,
  ...makeCalendarProps(),
  ...makeVCalendarDayProps(),
  ...makeVCalendarHeaderProps()
}, "VCalendar");
var VCalendar = genericComponent()({
  name: "VCalendar",
  props: makeVCalendarProps(),
  emits: {
    next: null,
    prev: null,
    today: null,
    "update:modelValue": null
  },
  setup(props, _ref) {
    let {
      attrs,
      emit,
      slots
    } = _ref;
    const adapter = useDate();
    const {
      daysInMonth,
      daysInWeek,
      genDays,
      model,
      displayValue,
      weekNumbers,
      weekDays
    } = useCalendar(props);
    const dayNames = adapter.getWeekdays();
    function onClickNext() {
      if (props.viewMode === "month") {
        model.value = [adapter.addMonths(displayValue.value, 1)];
      } else if (props.viewMode === "week") {
        model.value = [adapter.addDays(displayValue.value, 7)];
      } else if (props.viewMode === "day") {
        model.value = [adapter.addDays(displayValue.value, 1)];
      }
      nextTick(() => {
        emit("next", model.value[0]);
      });
    }
    function onClickPrev() {
      if (props.viewMode === "month") {
        model.value = [adapter.addMonths(displayValue.value, -1)];
      } else if (props.viewMode === "week") {
        model.value = [adapter.addDays(displayValue.value, -7)];
      } else if (props.viewMode === "day") {
        model.value = [adapter.addDays(displayValue.value, -1)];
      }
      nextTick(() => {
        emit("prev", model.value[0]);
      });
    }
    function onClickToday() {
      const date = adapter.date();
      model.value = [date];
      nextTick(() => {
        emit("today", model.value[0]);
      });
    }
    const title = computed(() => {
      return adapter.format(displayValue.value, "monthAndYear");
    });
    useRender(() => {
      var _a, _b, _c;
      const calendarDayProps = VCalendarDay.filterProps(props);
      const calendarHeaderProps = VCalendarHeader.filterProps(props);
      return createVNode("div", {
        "class": ["v-calendar", {
          "v-calendar-monthly": props.viewMode === "month",
          "v-calendar-weekly": props.viewMode === "week",
          "v-calendar-day": props.viewMode === "day"
        }]
      }, [createVNode("div", null, [!props.hideHeader && (((_a = slots.header) == null ? void 0 : _a.call(slots, {
        title: title.value,
        clickNext: onClickNext,
        clickPrev: onClickPrev,
        clickToday: onClickToday
      })) ?? createVNode(VCalendarHeader, mergeProps({
        "key": "calendar-header"
      }, calendarHeaderProps, {
        "title": title.value,
        "onClick:next": onClickNext,
        "onClick:prev": onClickPrev,
        "onClick:toToday": onClickToday
      }), {
        title: slots.title
      }))]), createVNode("div", {
        "class": ["v-calendar__container", `days__${weekDays.value.length}`]
      }, [props.viewMode === "month" && !props.hideDayHeader && createVNode("div", {
        "class": ["v-calendar-weekly__head", `days__${weekDays.value.length}`, ...!props.hideWeekNumber ? ["v-calendar-weekly__head-weeknumbers"] : []],
        "key": "calendarWeeklyHead"
      }, [!props.hideWeekNumber ? createVNode("div", {
        "key": "weekNumber0",
        "class": "v-calendar-weekly__head-weeknumber"
      }, null) : "", weekDays.value.map((weekday) => createVNode("div", {
        "class": `v-calendar-weekly__head-weekday${!props.hideWeekNumber ? "-with-weeknumber" : ""}`
      }, [dayNames[weekday]]))]), props.viewMode === "month" && createVNode("div", {
        "key": "VCalendarMonth",
        "class": ["v-calendar-month__days", `days${!props.hideWeekNumber ? "-with-weeknumbers" : ""}__${weekDays.value.length}`, ...!props.hideWeekNumber ? ["v-calendar-month__weeknumbers"] : []]
      }, [chunkArray(daysInMonth.value, weekDays.value.length).map((week, wi) => [!props.hideWeekNumber ? createVNode("div", mergeProps({
        "class": "v-calendar-month__weeknumber"
      }, getPrefixedEventHandlers(attrs, ":weekNumber", () => ({
        weekNumber: weekNumbers.value[wi],
        week
      }))), [weekNumbers.value[wi]]) : "", week.map((day) => {
        var _a2;
        return createVNode(VCalendarMonthDay, mergeProps({
          "key": day.date.getTime()
        }, calendarDayProps, {
          "day": day,
          "title": adapter.format(day.date, "dayOfMonth"),
          "events": (_a2 = props.events) == null ? void 0 : _a2.filter((e) => adapter.isSameDay(day.date, e.start) || adapter.isSameDay(day.date, e.end))
        }, attrs), {
          ...pick(slots, ["day-body", "day-event", "day-title"])
        });
      })])]), props.viewMode === "week" && daysInWeek.value.map((day, i) => {
        var _a2, _b2, _c2;
        return slots["day-interval"] ? (_b2 = slots["day-interval"]) == null ? void 0 : _b2.call(slots, {
          ...calendarDayProps,
          day,
          dayIndex: i,
          events: (_a2 = props.events) == null ? void 0 : _a2.filter((e) => adapter.isSameDay(e.start, day.date) || adapter.isSameDay(e.end, day.date))
        }) : createVNode(VCalendarDay, mergeProps(calendarDayProps, {
          "day": day,
          "dayIndex": i,
          "events": (_c2 = props.events) == null ? void 0 : _c2.filter((e) => adapter.isSameDay(e.start, day.date) || adapter.isSameDay(e.end, day.date))
        }, attrs), {
          ...pick(slots, ["interval", "intervalBody", "intervalEvent", "intervalTitle"])
        });
      }), props.viewMode === "day" && (slots["day-interval"] ? slots["day-interval"]({
        day: genDays([displayValue.value], adapter.date())[0],
        dayIndex: 0,
        events: (_b = props.events) == null ? void 0 : _b.filter((e) => adapter.isSameDay(e.start, genDays([displayValue.value], adapter.date())[0].date) || adapter.isSameDay(e.end, genDays([displayValue.value], adapter.date())[0].date))
      }) : createVNode(VCalendarDay, mergeProps(calendarDayProps, {
        "day": genDays([model.value[0]], adapter.date())[0],
        "dayIndex": 0,
        "events": (_c = props.events) == null ? void 0 : _c.filter((e) => adapter.isSameDay(e.start, genDays([model.value[0]], adapter.date())[0].date) || adapter.isSameDay(e.end, genDays([model.value[0]], adapter.date())[0].date))
      }, attrs), null))])]);
    });
    return {
      daysInMonth,
      daysInWeek,
      genDays
    };
  }
});
export {
  VCalendar,
  VCalendarDay,
  VCalendarHeader,
  VCalendarInterval,
  VCalendarIntervalEvent,
  VCalendarMonthDay
};
//# sourceMappingURL=vuetify_labs_VCalendar.js.map
